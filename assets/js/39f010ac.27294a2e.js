"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6350],{8860:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>d});var r=t(7953);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=r.createContext({}),c=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(l.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},y=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(t),y=i,d=u["".concat(l,".").concat(y)]||u[y]||m[y]||a;return t?r.createElement(d,o(o({ref:n},p),{},{components:t})):r.createElement(d,o({ref:n},p))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=y;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:i,o[1]=s;for(var c=2;c<a;c++)o[c]=t[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}y.displayName="MDXCreateElement"},3698:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=t(3911),i=(t(7953),t(8860));const a={id:"extending-functions",title:"Extending Client functionality",sidebar_label:"Extending Client functionality",slug:"/"},o=void 0,s={unversionedId:"extending-functions",id:"extending-functions",title:"Extending Client functionality",description:"Introduction",source:"@site/docs/extending-functions.md",sourceDirName:".",slug:"/",permalink:"/transformice.js/docs/",draft:!1,tags:[],version:"current",frontMatter:{id:"extending-functions",title:"Extending Client functionality",sidebar_label:"Extending Client functionality",slug:"/"},sidebar:"sidebar",previous:{title:"Quick Start",permalink:"/transformice.js/docs/"},next:{title:"Base",permalink:"/transformice.js/docs/api/classes/Base"}},l={},c=[{value:"Introduction",id:"introduction",level:2},{value:"Example",id:"example",level:2},{value:"Quick Links",id:"quick-links",level:2}],p={toc:c},u="wrapper";function m(e){let{components:n,...t}=e;return(0,i.yg)(u,(0,r.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h2",{id:"introduction"},"Introduction"),(0,i.yg)("p",null,"Behind the scenes, the client and the Transformice server communicate through ",(0,i.yg)("a",{parentName:"p",href:"api/classes/ByteArray"},(0,i.yg)("inlineCode",{parentName:"a"},"ByteArray"))," packets, and store states about each other."),(0,i.yg)("p",null,"The Transformice.js bot API aims to abstract away these details in most cases, maintaining a minimal set of events, structures, and functions that are commonly used and are cruicial to keep the bot running. However, you will soon notice that a lot of other features are not implemented."),(0,i.yg)("p",null,"By manipulating the ability to listen and send raw packets, you can extend the functionality of the client beyond what is provided by the base API. "),(0,i.yg)("h2",{id:"example"},"Example"),(0,i.yg)("p",null,"In this example, we extend the ",(0,i.yg)("a",{parentName:"p",href:"api/classes/Client"},(0,i.yg)("inlineCode",{parentName:"a"},"Client"))," with an ability to grab the Lua API guide in ",(0,i.yg)("inlineCode",{parentName:"p"},"string")," form."),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"myClient.ts")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-ts"},'import { Base, Client, Identifier } from "@cheeseformice/transformice.js";\nimport { ClientOptions } from "@cheeseformice/transformice.js/dist/client/Client";\nimport ClientEvents from "@cheeseformice/transformice.js/dist/client/Events";\nimport { ByteArray, Connection } from "@cheeseformice/transformice.js/dist/utils";\n\nexport interface MyExtraClientEvents extends ClientEvents {\n    longTextPopup: (popup: LongTextPopup) => void;\n}\n\ndeclare interface MyExtraClient {\n    on<T extends keyof MyExtraClientEvents>(event: T, listener: MyExtraClientEvents[T]): this;\n    once<T extends keyof MyExtraClientEvents>(event: T, listener: MyExtraClientEvents[T]): this;\n    emit<T extends keyof MyExtraClientEvents>(event: T, ...args: Parameters<MyExtraClientEvents[T]>): boolean;\n    waitFor<T extends keyof MyExtraClientEvents>(eventName: T, timeout?: number, condition?: (...args: Parameters<MyExtraClientEvents[T]>) => boolean): Promise<Parameters<MyExtraClientEvents[T]>>;\n    waitFor<T extends keyof MyExtraClientEvents>(eventName: T, condition?: (...args: Parameters<MyExtraClientEvents[T]>) => boolean, timeout?: number): Promise<Parameters<MyExtraClientEvents[T]>>;\n}\n\nclass MyExtraClient extends Client {\n       startTimestamp: number;\n\n    constructor(name: string, password: string, options?: ClientOptions) {\n        super(name, password, options);\n        this.startTimestamp = -1;\n\n        this.on("login", this.onLogin.bind(this));\n        this.on("rawPacket", this.handleNormalPackets.bind(this));\n    }\n\n    get uptime() {\n        return Date.now() - this.startTimestamp;\n    }\n\n    private onLogin() {\n        this.startTimestamp = Date.now();\n    }\n\n    private handleNormalPackets(conn: Connection, ccc: number, packet: ByteArray) {\n        packet.readPosition = 2;\n\n        switch (ccc) {\n            // Long text popup\n            case Identifier(28, 46): {\n                const contentType = packet.readByte();\n                packet.readUTF();\n                const contentLen = (packet.readUnsignedByte() & 255) << 16 | (packet.readUnsignedByte() & 255) << 8 | packet.readUnsignedByte() & 255;\n                const content = packet.readBufBytes(contentLen).toString();\n                this.emit("longTextPopup", new LongTextPopup(this, contentType, content));\n                break;\n            }\n        }\n    }\n\n    async getLuaHelp() {\n        this.sendCommand("luahelp");\n        const [popup] = await this.waitFor("longTextPopup", (popup) => popup.contentType === 2, 5000);\n        return popup.content;\n    }\n}\n\nclass LongTextPopup extends Base {\n    contentType: LongTextPopupContent;\n    content: string;\n\n    constructor(\n        client: Client,\n        contentType: LongTextPopupContent,\n        content: string\n    ) {\n        super(client);\n        this.contentType = contentType;\n        this.content = content;\n    }\n}\n\nexport { MyExtraClient };\n')),(0,i.yg)("p",null,(0,i.yg)("inlineCode",{parentName:"p"},"main.ts")),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-js"},'import { enums } from "@cheeseformice/transformice.js");\nimport { MyExtraClient } from "myClient";\n\n// Use our newly written MyExtraClient instead of the default client provided by Transformice.js\nconst client = new MyExtraClient("username", "password", {\n    language: enums.Languages.en\n});\n\nclient.on("roomMessage", (message) => {\n    if (client.name === message.author.name) return;\n    client.sendRoomMessage(message.author.look);\n\n    client.getLuaHelp()\n        .then((luaHelpString: string) => {\n            client.sendRoomMessage("Got Lua Help: " + luaHelpString.substring(20));\n        })\n        .catch((e) => {\n            console.error(e)\n        });\n});\n\nclient.run();\n')),(0,i.yg)("p",null,"You can use this as a boilerplate to further extend functionality for your requirements. "),(0,i.yg)("h2",{id:"quick-links"},"Quick Links"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"api/classes/Client"},"Client API")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"api/interfaces/Internal.ClientEvents"},"Client Events")),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("a",{parentName:"li",href:"api/namespaces/enums"},"Enums"))))}m.isMDXComponent=!0}}]);